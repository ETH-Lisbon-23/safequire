{
  "address": "0x9A92928604331E9fBDF5390A134c5fC20DAd3943",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "safe",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "ListedForSale",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "metadataHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "Metadata",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "safe",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerReplaced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "safe",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        }
      ],
      "name": "Sold",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISafeProtocolManager",
          "name": "_manager",
          "type": "address"
        },
        {
          "internalType": "contract ISafe",
          "name": "_safe",
          "type": "address"
        }
      ],
      "name": "buy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISafeProtocolManager",
          "name": "_manager",
          "type": "address"
        },
        {
          "internalType": "contract ISafe",
          "name": "_safe",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "listForSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metadataHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metadataProvider",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "providerType",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "location",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requiresRootAccess",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "sellerSafeToListings",
      "outputs": [
        {
          "internalType": "contract ISafe",
          "name": "sellerSafe",
          "type": "address"
        },
        {
          "internalType": "contract ISafe",
          "name": "proceedsSafe",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "sold",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf29f86721778d22204ab0f882fd906bd1224e447d7c0196e7f1a599d9abadbd4",
  "receipt": {
    "to": "0x914d7Fec6aaC8cd542e72Bca78B30650d45643d7",
    "from": "0xfa098e621eaC8438CC84e5D26e9EE5123B825350",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "1549528",
    "logsBloom": "0x
    "blockHash": "0x3194c4f35781c3a0e1fba37520fa5a99ba311a1ae267931a332b5e449e2bb408",
    "transactionHash": "0xf29f86721778d22204ab0f882fd906bd1224e447d7c0196e7f1a599d9abadbd4",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 30803199,
        "transactionHash": "0xf29f86721778d22204ab0f882fd906bd1224e447d7c0196e7f1a599d9abadbd4",
        "address": "0x9A92928604331E9fBDF5390A134c5fC20DAd3943",
        "topics": [
          "0x522c683f99251eea7f3b027592e92a5398e7582983be1f7c0f33715ce025740f",
          "0xed83c1b8e77408e956547058c6d12ea133f8b065363307a9437911a0ba6231f0"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000182000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000000b4e61746120506c7567696e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005312e302e300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001768747470733a2f2f6e6174612e76657263656c2e617070000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 500,
        "blockHash": "0x3194c4f35781c3a0e1fba37520fa5a99ba311a1ae267931a332b5e449e2bb408"
      }
    ],
    "blockNumber": 30803199,
    "cumulativeGasUsed": "16130050",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "6acaa67eccc70c3444ec9f4751c10acb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ListedForSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Metadata\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerReplaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"Sold\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract ISafeProtocolManager\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"contract ISafe\",\"name\":\"_safe\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISafeProtocolManager\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"contract ISafe\",\"name\":\"_safe\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"listForSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataProvider\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"providerType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"location\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiresRootAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellerSafeToListings\",\"outputs\":[{\"internalType\":\"contract ISafe\",\"name\":\"sellerSafe\",\"type\":\"address\"},{\"internalType\":\"contract ISafe\",\"name\":\"proceedsSafe\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sold\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"buy(address,address)\":{\"params\":{\"_manager\":\"Address of the Safe{Core} Protocol Manager.\",\"_safe\":\"Safe account for sale\"}},\"listForSale(address,address,uint256)\":{\"params\":{\"_manager\":\"Address of the Safe{Core} Protocol Manager.\",\"_price\":\"Price in wei\",\"_safe\":\"Safe account for sale\"}},\"metadataProvider()\":{\"returns\":{\"location\":\"bytes\",\"providerType\":\"uint256 Type of metadata provider\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"title\":\"NataPlugin executes root transactions through 2 Safes to atomically swap ... the ownership of this safe for another newly-created Safe containing the requested amount of ETH.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"buy(address,address)\":{\"notice\":\"Buy a Safe.\"},\"listForSale(address,address,uint256)\":{\"notice\":\"List a Safe for sale.\"},\"metadataProvider()\":{\"notice\":\"A function that returns information about the type of metadata provider and its location.         For more information on metadata provider, refer to https://github.com/safe-global/safe-core-protocol-specs/.\"},\"name()\":{\"notice\":\"A funtion that returns name of the plugin\"},\"requiresRootAccess()\":{\"notice\":\"A function that indicates if the plugin requires root access to a Safe.\"},\"version()\":{\"notice\":\"A function that returns version of the plugin\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/NataPlugin.sol\":\"NataPlugin\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@safe-global/safe-core-protocol/contracts/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.18;\\n\\nstruct SafeProtocolAction {\\n    address payable to;\\n    uint256 value;\\n    bytes data;\\n}\\n\\nstruct SafeTransaction {\\n    SafeProtocolAction[] actions;\\n    uint256 nonce;\\n    bytes32 metadataHash;\\n}\\n\\nstruct SafeRootAccess {\\n    SafeProtocolAction action;\\n    uint256 nonce;\\n    bytes32 metadataHash;\\n}\\n\",\"keccak256\":\"0xfcce6a99ceb499693f9a33aa624affcefcbb9af1fb328f4b2bc4b9f245bb48ba\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-core-protocol/contracts/interfaces/Accounts.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.18;\\n\\n/**\\n * @title ISafe Declares the functions that are called on a Safe by Safe{Core} Protocol.\\n */\\ninterface ISafe {\\n    function execTransactionFromModule(\\n        address payable to,\\n        uint256 value,\\n        bytes calldata data,\\n        uint8 operation\\n    ) external returns (bool success);\\n\\n    function execTransactionFromModuleReturnData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        uint8 operation\\n    ) external returns (bool success, bytes memory returnData);\\n}\\n\",\"keccak256\":\"0xa3dd0d1c1c701479d294e384c4350e3829e69045a2c740a62da353eac45ef258\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-core-protocol/contracts/interfaces/Integrations.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.18;\\nimport {ISafe} from \\\"./Accounts.sol\\\";\\nimport {SafeTransaction, SafeRootAccess} from \\\"../DataTypes.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title ISafeProtocolFunctionHandler - An interface that a Safe function handler should implement to handle static calls.\\n * @notice In Safe{Core} Protocol, a function handler can be used to add additional functionality to a Safe.\\n *         User(s) should add SafeProtocolManager as a function handler (aka fallback handler in Safe v1.x) to the Safe\\n *         and enable the contract implementing ISafeProtocolFunctionHandler interface as a function handler in the\\n *         SafeProtocolManager for the specific function identifier.\\n */\\ninterface ISafeProtocolFunctionHandler is IERC165 {\\n    /**\\n     * @notice Handles calls to the Safe contract forwarded by the fallback function.\\n     * @param safe A Safe instance\\n     * @param sender Address of the sender\\n     * @param value Amount of ETH\\n     * @param data Arbitrary length bytes\\n     * @return result Arbitrary length bytes containing result of the operation\\n     */\\n    function handle(ISafe safe, address sender, uint256 value, bytes calldata data) external returns (bytes memory result);\\n\\n    /**\\n     * @notice A function that returns information about the type of metadata provider and its location.\\n     *         For more information on metadata provider, refer to https://github.com/safe-global/safe-core-protocol-specs/.\\n     * @return providerType uint256 Type of metadata provider\\n     * @return location bytes\\n     */\\n    function metadataProvider() external view returns (uint256 providerType, bytes memory location);\\n}\\n\\n/**\\n * @title ISafeProtocolStaticFunctionHandler - An interface that a Safe functionhandler should implement in case when handling static calls\\n * @notice In Safe{Core} Protocol, a function handler can be used to add additional functionality to a Safe.\\n *         User(s) should add SafeProtocolManager as a function handler (aka fallback handler in Safe v1.x) to the Safe\\n *         and enable the contract implementing ISafeProtocolStaticFunctionHandler interface as a function handler in the\\n *         SafeProtocolManager for the specific function identifier.\\n */\\ninterface ISafeProtocolStaticFunctionHandler is IERC165 {\\n    /**\\n     * @notice Handles static calls to the Safe contract forwarded by the fallback function.\\n     * @param safe A Safe instance\\n     * @param sender Address of the sender\\n     * @param value Amount of ETH\\n     * @param data Arbitrary length bytes\\n     * @return result Arbitrary length bytes containing result of the operation\\n     */\\n    function handle(ISafe safe, address sender, uint256 value, bytes calldata data) external view returns (bytes memory result);\\n\\n    /**\\n     * @notice A function that returns information about the type of metadata provider and its location.\\n     *         For more information on metadata provider, refer to https://github.com/safe-global/safe-core-protocol-specs/.\\n     * @return providerType uint256 Type of metadata provider\\n     * @return location bytes\\n     */\\n    function metadataProvider() external view returns (uint256 providerType, bytes memory location);\\n}\\n\\n/**\\n * @title ISafeProtocolHooks - An interface that a contract should implement to be enabled as hooks.\\n * @notice In Safe{Core} Protocol, hooks can approve or deny transactions based on the logic it implements.\\n */\\ninterface ISafeProtocolHooks is IERC165 {\\n    /**\\n     * @notice A function that will be called by a Safe before the execution of a transaction if the hooks are enabled\\n     * @dev Add custom logic in this function to validate the pre-state and contents of transaction for non-root access.\\n     * @param safe A Safe instance\\n     * @param tx A struct of type SafeTransaction that contains the details of the transaction.\\n     * @param executionType uint256\\n     * @param executionMeta Arbitrary length of bytes\\n     * @return preCheckData bytes\\n     */\\n    function preCheck(\\n        ISafe safe,\\n        SafeTransaction calldata tx,\\n        uint256 executionType,\\n        bytes calldata executionMeta\\n    ) external returns (bytes memory preCheckData);\\n\\n    /**\\n     * @notice A function that will be called by a safe before the execution of a transaction if the hooks are enabled and\\n     *         transaction requies tool access.\\n     * @dev Add custom logic in this function to validate the pre-state and contents of transaction for root access.\\n     * @param safe A Safe instance\\n     * @param rootAccess DataTypes.SafeRootAccess\\n     * @param executionType uint256\\n     * @param executionMeta bytes\\n     * @return preCheckData bytes\\n     */\\n    function preCheckRootAccess(\\n        ISafe safe,\\n        SafeRootAccess calldata rootAccess,\\n        uint256 executionType,\\n        bytes calldata executionMeta\\n    ) external returns (bytes memory preCheckData);\\n\\n    /**\\n     * @notice A function that will be called by a safe after the execution of a transaction if the hooks are enabled. Hooks should revert if the post state of after the transaction is not as expected.\\n     * @dev Add custom logic in this function to validate the post-state after the transaction is executed.\\n     * @param safe ISafe\\n     * @param success bool\\n     * @param preCheckData Arbitrary length bytes that was returned by during pre-check of the transaction.\\n     */\\n    function postCheck(ISafe safe, bool success, bytes calldata preCheckData) external;\\n}\\n\\n/**\\n * @title ISafeProtocolPlugin - An interface that a Safe plugin should implement\\n */\\ninterface ISafeProtocolPlugin is IERC165 {\\n    /**\\n     * @notice A funtion that returns name of the plugin\\n     * @return name string name of the plugin\\n     */\\n    function name() external view returns (string memory name);\\n\\n    /**\\n     * @notice A function that returns version of the plugin\\n     * @return version string version of the plugin\\n     */\\n    function version() external view returns (string memory version);\\n\\n    /**\\n     * @notice A function that returns information about the type of metadata provider and its location.\\n     *         For more information on metadata provider, refer to https://github.com/safe-global/safe-core-protocol-specs/.\\n     * @return providerType uint256 Type of metadata provider\\n     * @return location bytes\\n     */\\n    function metadataProvider() external view returns (uint256 providerType, bytes memory location);\\n\\n    /**\\n     * @notice A function that indicates if the plugin requires root access to a Safe.\\n     * @return requiresRootAccess True if root access is required, false otherwise.\\n     */\\n    function requiresRootAccess() external view returns (bool requiresRootAccess);\\n}\\n\",\"keccak256\":\"0x31362db1a2641c47d3456c02b31dba8f8b860082ea8d984fae5737d77199a6a7\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-core-protocol/contracts/interfaces/Manager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.18;\\nimport {ISafe} from \\\"./Accounts.sol\\\";\\nimport {SafeRootAccess, SafeTransaction} from \\\"../DataTypes.sol\\\";\\n\\n/**\\n * @title ISafeProtocolManager interface a Manager should implement\\n * @notice A mediator checks the status of the integration through the registry and allows only\\n *         listed and non-flagged integrations to execute transactions. A Safe account should\\n *         add a mediator as a plugin.\\n */\\ninterface ISafeProtocolManager {\\n    /**\\n     * @notice This function allows enabled plugins to execute non-delegate call transactions thorugh a Safe.\\n     *         It should validate the status of the plugin through the registry and allows only listed and non-flagged integrations to execute transactions.\\n     * @param safe Address of a Safe account\\n     * @param transaction SafeTransaction instance containing payload information about the transaction\\n     * @return data Array of bytes types returned upon the successful execution of all the actions. The size of the array will be the same as the size of the actions\\n     *         in case of succcessful execution. Empty if the call failed.\\n     */\\n    function executeTransaction(ISafe safe, SafeTransaction calldata transaction) external returns (bytes[] memory data);\\n\\n    /**\\n     * @notice This function allows enabled plugins to execute delegate call transactions thorugh a Safe.\\n     *         It should validate the status of the plugin through the registry and allows only listed and non-flagged integrations to execute transactions.\\n     * @param safe Address of a Safe account\\n     * @param rootAccess SafeTransaction instance containing payload information about the transaction\\n     * @return data Arbitrary length bytes data returned upon the successful execution. The size of the array will be the same as the size of the actions\\n     *         in case of succcessful execution. Empty if the call failed.\\n     */\\n    function executeRootAccess(ISafe safe, SafeRootAccess calldata rootAccess) external returns (bytes memory data);\\n}\\n\",\"keccak256\":\"0x50c41530ee7788b90e2a12b1669642cb6dd316cde100cfe4ee2eebddd3db7ef6\",\"license\":\"LGPL-3.0-only\"},\"src/Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport {ISafeProtocolPlugin} from \\\"@safe-global/safe-core-protocol/contracts/interfaces/Integrations.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\nenum MetadataProviderType {\\n    IPFS,\\n    URL,\\n    Contract,\\n    Event\\n}\\n\\ninterface IMetadataProvider {\\n    function retrieveMetadata(bytes32 metadataHash) external view returns (bytes memory metadata);\\n}\\n\\nstruct PluginMetadata {\\n    string name;\\n    string version;\\n    bool requiresRootAccess;\\n    string iconUrl;\\n    string appUrl;\\n}\\n\\nlibrary PluginMetadataOps {\\n    function encode(PluginMetadata memory data) internal pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                uint8(0x00), // Format\\n                uint8(0x00), // Format version\\n                abi.encode(data.name, data.version, data.requiresRootAccess, data.iconUrl, data.appUrl) // Plugin Metadata\\n            );\\n    }\\n\\n    function decode(bytes calldata data) internal pure returns (PluginMetadata memory) {\\n        require(bytes16(data[0:2]) == bytes16(0x0000), \\\"Unsupported format or format version\\\");\\n        (string memory name, string memory version, bool requiresRootAccess, string memory iconUrl, string memory appUrl) = abi.decode(\\n            data[2:],\\n            (string, string, bool, string, string)\\n        );\\n        return PluginMetadata(name, version, requiresRootAccess, iconUrl, appUrl);\\n    }\\n}\\n\\nabstract contract BasePlugin is ISafeProtocolPlugin {\\n    using PluginMetadataOps for PluginMetadata;\\n\\n    string public name;\\n    string public version;\\n    bool public immutable requiresRootAccess;\\n    bytes32 public immutable metadataHash;\\n\\n    constructor(PluginMetadata memory metadata) {\\n        name = metadata.name;\\n        version = metadata.version;\\n        requiresRootAccess = metadata.requiresRootAccess;\\n        metadataHash = keccak256(metadata.encode());\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {\\n        return interfaceId == type(ISafeProtocolPlugin).interfaceId || interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\\nabstract contract BasePluginWithStoredMetadata is BasePlugin, IMetadataProvider {\\n    using PluginMetadataOps for PluginMetadata;\\n\\n    bytes private encodedMetadata;\\n\\n    constructor(PluginMetadata memory metadata) BasePlugin(metadata) {\\n        encodedMetadata = metadata.encode();\\n    }\\n\\n    function retrieveMetadata(bytes32 _metadataHash) external view override returns (bytes memory metadata) {\\n        require(metadataHash == _metadataHash, \\\"Cannot retrieve metadata\\\");\\n        return encodedMetadata;\\n    }\\n\\n    function metadataProvider() public view override returns (uint256 providerType, bytes memory location) {\\n        providerType = uint256(MetadataProviderType.Contract);\\n        location = abi.encode(address(this));\\n    }\\n}\\n\\nabstract contract BasePluginWithEventMetadata is BasePlugin {\\n    using PluginMetadataOps for PluginMetadata;\\n\\n    event Metadata(bytes32 indexed metadataHash, bytes data);\\n\\n    constructor(PluginMetadata memory metadata) BasePlugin(metadata) {\\n        emit Metadata(metadataHash, metadata.encode());\\n    }\\n\\n    function metadataProvider() public view override returns (uint256 providerType, bytes memory location) {\\n        providerType = uint256(MetadataProviderType.Event);\\n        location = abi.encode(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x44c31bf2b97cc976b51dbbae0deb2198459e38c176ff5cca61c8fa717f657b28\",\"license\":\"MIT\"},\"src/NataPlugin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport {ISafe} from \\\"@safe-global/safe-core-protocol/contracts/interfaces/Accounts.sol\\\";\\nimport {ISafeProtocolManager} from \\\"@safe-global/safe-core-protocol/contracts/interfaces/Manager.sol\\\";\\nimport {SafeRootAccess, SafeTransaction, SafeProtocolAction} from \\\"@safe-global/safe-core-protocol/contracts/DataTypes.sol\\\";\\nimport {BasePluginWithEventMetadata, PluginMetadata} from \\\"./Base.sol\\\";\\nimport {IOwnable} from \\\"./interfaces/IOwnable.sol\\\";\\n\\n/**\\n * @title NataPlugin executes root transactions through 2 Safes to atomically swap\\n * ... the ownership of this safe for another newly-created Safe containing the requested amount of ETH.\\n */\\ncontract NataPlugin is BasePluginWithEventMetadata {\\n    // ************************************* //\\n    // *             Storage               * //\\n    // ************************************* //\\n    // Reminder: state must be safe-specific\\n    mapping(address => Listing) public sellerSafeToListings;\\n\\n    // ************************************* //\\n    // *         Enums / Structs           * //\\n    // ************************************* //\\n    struct Listing {\\n        ISafe sellerSafe;\\n        ISafe proceedsSafe;\\n        uint256 price;\\n        bool sold;\\n    }\\n\\n    // ************************************* //\\n    // *              Events               * //\\n    // ************************************* //\\n    event ListedForSale(address indexed safe, uint price);\\n    event OwnerReplaced(address indexed safe, address oldOwner, address newOwner);\\n    event Sold(address indexed safe, address indexed buyer);\\n\\n    // ************************************* //\\n    // *            Constructor            * //\\n    // ************************************* //\\n    constructor()\\n        BasePluginWithEventMetadata(\\n            PluginMetadata({\\n                name: \\\"Nata Plugin\\\",\\n                version: \\\"1.0.0\\\",\\n                requiresRootAccess: true,\\n                iconUrl: \\\"\\\", //\\\"https://raw.githubusercontent.com/nata-finance/nata/main/web/public/nata.png\\\",\\n                appUrl: \\\"https://nata.vercel.app\\\"\\n            })\\n        )\\n    {\\n        // NOP\\n    }\\n\\n    // ************************************* //\\n    // *         State Modifiers           * //\\n    // ************************************* //\\n\\n    /**\\n     * @notice List a Safe for sale.\\n     * @param _manager Address of the Safe{Core} Protocol Manager.\\n     * @param _safe Safe account for sale\\n     * @param _price Price in wei\\n     */\\n    function listForSale(ISafeProtocolManager _manager, ISafe _safe, uint256 _price) external {\\n        require(msg.sender == address(_safe), \\\"Unauthorized\\\");\\n\\n        ISafe proceedsSafeAddress = ISafe(address(0)); // TODO: deployNewSafe() with address(this) as owner\\n\\n        sellerSafeToListings[address(_safe)] = Listing({\\n            sellerSafe: _safe,\\n            proceedsSafe: proceedsSafeAddress,\\n            price: _price,\\n            sold: false\\n        });\\n\\n        emit ListedForSale(address(this), _price);\\n    }\\n\\n    /**\\n     * @notice Buy a Safe.\\n     * @param _manager Address of the Safe{Core} Protocol Manager.\\n     * @param _safe Safe account for sale\\n     */\\n    function buy(ISafeProtocolManager _manager, ISafe _safe) external {\\n        Listing memory listing = sellerSafeToListings[address(_safe)];\\n\\n        require(address(listing.proceedsSafe) != address(0), \\\"Not for sale\\\");\\n        require(address(listing.proceedsSafe).balance >= listing.price, \\\"Not enough funds\\\");\\n        require(listing.sold == false, \\\"Already sold\\\");\\n        \\n        listing.sold = true; // Check-Effects-Interactions\\n\\n        // Swap transfer safes ownership\\n        address buyer = msg.sender;\\n        address seller = IOwnable(address(_safe)).getOwners()[0];\\n        _replaceOwner(_manager, _safe, seller, buyer); // Seller -> Buyer\\n        _replaceOwner(_manager, listing.proceedsSafe, address(this), seller); // NataPlugin -> Seller\\n        \\n        emit Sold(address(this), msg.sender);\\n    }\\n\\n    // ************************************* //\\n    // *            Internal               * //\\n    // ************************************* //\\n\\n    function _replaceOwner(ISafeProtocolManager _manager, ISafe _safe, address _oldOwner, address _newOwner) internal {\\n        // Assuming only 1 owner for now\\n        // TODO: support multiple owners\\n        bytes memory txData = abi.encodeWithSignature(\\\"swapOwner(address,address,address)\\\", address(0x1), _oldOwner, _newOwner);\\n        SafeProtocolAction memory safeProtocolAction = SafeProtocolAction(payable(address(_safe)), 0, txData);\\n        SafeRootAccess memory safeTx = SafeRootAccess(safeProtocolAction, 0, \\\"\\\");\\n        _manager.executeRootAccess(_safe, safeTx);\\n\\n        emit OwnerReplaced(address(_safe), _oldOwner, _newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x54da4ce844ace5a0bc457bdc7cb6bd00355a0918cdd97a9e9d23d3c171427f37\",\"license\":\"MIT\"},\"src/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// Interface for the Gnosis Safe to interact with the getOwners function\\ninterface IOwnable {\\n    function getOwners() external view returns (address[] memory);\\n}\",\"keccak256\":\"0xae263a2e39147ddd7fe3765ad9508b5a67b4dbb1e28f136f2939803980336e2b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b506040518060a001604052806040518060400160405280600b81526020017f4e61746120506c7567696e00000000000000000000000000000000000000000081525081526020016040518060400160405280600581526020017f312e302e3000000000000000000000000000000000000000000000000000000081525081526020016001151581526020016040518060200160405280600081525081526020016040518060400160405280601781526020017f68747470733a2f2f6e6174612e76657263656c2e617070000000000000000000815250815250808060000151600090816200010091906200048b565b508060200151600190816200011691906200048b565b50806040015115156080811515815250506200013d81620001a460201b62000a2f1760201c565b8051906020012060a081815250505060a0517f522c683f99251eea7f3b027592e92a5398e7582983be1f7c0f33715ce025740f6200018683620001a460201b62000a2f1760201c565b6040516200019591906200060c565b60405180910390a250620007e2565b606060008083600001518460200151856040015186606001518760800151604051602001620001d89594939291906200069f565b604051602081830303815290604052604051602001620001fb93929190620007a3565b6040516020818303038152906040529050919050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200029357607f821691505b602082108103620002a957620002a86200024b565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620003137fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620002d4565b6200031f8683620002d4565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006200036c62000366620003608462000337565b62000341565b62000337565b9050919050565b6000819050919050565b62000388836200034b565b620003a0620003978262000373565b848454620002e1565b825550505050565b600090565b620003b7620003a8565b620003c48184846200037d565b505050565b5b81811015620003ec57620003e0600082620003ad565b600181019050620003ca565b5050565b601f8211156200043b576200040581620002af565b6200041084620002c4565b8101602085101562000420578190505b620004386200042f85620002c4565b830182620003c9565b50505b505050565b600082821c905092915050565b6000620004606000198460080262000440565b1980831691505092915050565b60006200047b83836200044d565b9150826002028217905092915050565b620004968262000211565b67ffffffffffffffff811115620004b257620004b16200021c565b5b620004be82546200027a565b620004cb828285620003f0565b600060209050601f831160018114620005035760008415620004ee578287015190505b620004fa85826200046d565b8655506200056a565b601f1984166200051386620002af565b60005b828110156200053d5784890151825560018201915060208501945060208101905062000516565b868310156200055d578489015162000559601f8916826200044d565b8355505b6001600288020188555050505b505050505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015620005ae57808201518184015260208101905062000591565b60008484015250505050565b6000601f19601f8301169050919050565b6000620005d88262000572565b620005e481856200057d565b9350620005f68185602086016200058e565b6200060181620005ba565b840191505092915050565b60006020820190508181036000830152620006288184620005cb565b905092915050565b600082825260208201905092915050565b60006200064e8262000211565b6200065a818562000630565b93506200066c8185602086016200058e565b6200067781620005ba565b840191505092915050565b60008115159050919050565b620006998162000682565b82525050565b600060a0820190508181036000830152620006bb818862000641565b90508181036020830152620006d1818762000641565b9050620006e260408301866200068e565b8181036060830152620006f6818562000641565b905081810360808301526200070c818462000641565b90509695505050505050565b600060ff82169050919050565b60008160f81b9050919050565b60006200073f8262000725565b9050919050565b6200075b620007558262000718565b62000732565b82525050565b600081905092915050565b6000620007798262000572565b62000785818562000761565b9350620007978185602086016200058e565b80840191505092915050565b6000620007b1828662000746565b600182019150620007c3828562000746565b600182019150620007d582846200076c565b9150819050949350505050565b60805160a0516119816200080860003960006109510152600061092d01526119816000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063ad7fadc511610066578063ad7fadc514610120578063be193d271461013c578063c5a1d7f01461015a578063d3d72d2a14610178578063fd199bfe1461019757610093565b806301ffc9a71461009857806306fdde03146100c8578063227b2e7f146100e657806354fd4d5014610102575b600080fd5b6100b260048036038101906100ad9190610cd2565b6101ca565b6040516100bf9190610d1a565b60405180910390f35b6100d061029c565b6040516100dd9190610dc5565b60405180910390f35b61010060048036038101906100fb9190610ecb565b61032a565b005b61010a610538565b6040516101179190610dc5565b60405180910390f35b61013a60048036038101906101359190610f1e565b6105c6565b005b61014461092b565b6040516101519190610d1a565b60405180910390f35b61016261094f565b60405161016f9190610f77565b60405180910390f35b610180610973565b60405161018e929190610ff6565b60405180910390f35b6101b160048036038101906101ac9190611052565b6109b2565b6040516101c194939291906110de565b60405180910390f35b60007f3fce835e000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061029557507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b600080546102a990611152565b80601f01602080910402602001604051908101604052809291908181526020018280546102d590611152565b80156103225780601f106102f757610100808354040283529160200191610322565b820191906000526020600020905b81548152906001019060200180831161030557829003601f168201915b505050505081565b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610398576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038f906111cf565b60405180910390fd5b600060405180608001604052808473ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff16815260200183815260200160001515815250600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015560608201518160030160006101000a81548160ff0219169083151502179055509050503073ffffffffffffffffffffffffffffffffffffffff167fd8e128775b7d140e398e926eac4a340f22911251358cb8069551f12bc0f5ab618360405161052a91906111ef565b60405180910390a250505050565b6001805461054590611152565b80601f016020809104026020016040519081016040528092919081815260200182805461057190611152565b80156105be5780601f10610593576101008083540402835291602001916105be565b820191906000526020600020905b8154815290600101906020018083116105a157829003601f168201915b505050505081565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900460ff1615151515815250509050600073ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1603610758576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074f90611256565b60405180910390fd5b8060400151816020015173ffffffffffffffffffffffffffffffffffffffff163110156107ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b1906112c2565b60405180910390fd5b600015158160600151151514610805576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fc9061132e565b60405180910390fd5b6001816060019015159081151581525050600033905060008373ffffffffffffffffffffffffffffffffffffffff1663a0e67e2b6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610868573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061089191906114ab565b6000815181106108a4576108a36114f4565b5b602002602001015190506108ba85858385610a98565b6108ca8584602001513084610a98565b3373ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fa368df6d8ea29fc7367045e5c6a2e3a04b89059842ed575d55ce8531117cfeae60405160405180910390a35050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000606060038081111561098a57610989611523565b5b91503060405160200161099d9190611561565b60405160208183030381529060405290509091565b60026020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030160009054906101000a900460ff16905084565b606060008083600001518460200151856040015186606001518760800151604051602001610a6195949392919061157c565b604051602081830303815290604052604051602001610a829392919061166a565b6040516020818303038152906040529050919050565b600060018383604051602401610ab0939291906116a3565b6040516020818303038152906040527fe318b52b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050600060405180606001604052808673ffffffffffffffffffffffffffffffffffffffff168152602001600081526020018381525090506000604051806060016040528083815260200160008152602001600080191681525090508673ffffffffffffffffffffffffffffffffffffffff166330f571f987836040518363ffffffff1660e01b8152600401610bc4929190611803565b6000604051808303816000875af1158015610be3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610c0c91906118d9565b508573ffffffffffffffffffffffffffffffffffffffff167fc0f702ee865bb9620cf6bc5c77eba7c58496654d164d19ebf850253e697177998686604051610c55929190611922565b60405180910390a250505050505050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610caf81610c7a565b8114610cba57600080fd5b50565b600081359050610ccc81610ca6565b92915050565b600060208284031215610ce857610ce7610c70565b5b6000610cf684828501610cbd565b91505092915050565b60008115159050919050565b610d1481610cff565b82525050565b6000602082019050610d2f6000830184610d0b565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610d6f578082015181840152602081019050610d54565b60008484015250505050565b6000601f19601f8301169050919050565b6000610d9782610d35565b610da18185610d40565b9350610db1818560208601610d51565b610dba81610d7b565b840191505092915050565b60006020820190508181036000830152610ddf8184610d8c565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e1282610de7565b9050919050565b6000610e2482610e07565b9050919050565b610e3481610e19565b8114610e3f57600080fd5b50565b600081359050610e5181610e2b565b92915050565b6000610e6282610e07565b9050919050565b610e7281610e57565b8114610e7d57600080fd5b50565b600081359050610e8f81610e69565b92915050565b6000819050919050565b610ea881610e95565b8114610eb357600080fd5b50565b600081359050610ec581610e9f565b92915050565b600080600060608486031215610ee457610ee3610c70565b5b6000610ef286828701610e42565b9350506020610f0386828701610e80565b9250506040610f1486828701610eb6565b9150509250925092565b60008060408385031215610f3557610f34610c70565b5b6000610f4385828601610e42565b9250506020610f5485828601610e80565b9150509250929050565b6000819050919050565b610f7181610f5e565b82525050565b6000602082019050610f8c6000830184610f68565b92915050565b610f9b81610e95565b82525050565b600081519050919050565b600082825260208201905092915050565b6000610fc882610fa1565b610fd28185610fac565b9350610fe2818560208601610d51565b610feb81610d7b565b840191505092915050565b600060408201905061100b6000830185610f92565b818103602083015261101d8184610fbd565b90509392505050565b61102f81610e07565b811461103a57600080fd5b50565b60008135905061104c81611026565b92915050565b60006020828403121561106857611067610c70565b5b60006110768482850161103d565b91505092915050565b6000819050919050565b60006110a461109f61109a84610de7565b61107f565b610de7565b9050919050565b60006110b682611089565b9050919050565b60006110c8826110ab565b9050919050565b6110d8816110bd565b82525050565b60006080820190506110f360008301876110cf565b61110060208301866110cf565b61110d6040830185610f92565b61111a6060830184610d0b565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061116a57607f821691505b60208210810361117d5761117c611123565b5b50919050565b7f556e617574686f72697a65640000000000000000000000000000000000000000600082015250565b60006111b9600c83610d40565b91506111c482611183565b602082019050919050565b600060208201905081810360008301526111e8816111ac565b9050919050565b60006020820190506112046000830184610f92565b92915050565b7f4e6f7420666f722073616c650000000000000000000000000000000000000000600082015250565b6000611240600c83610d40565b915061124b8261120a565b602082019050919050565b6000602082019050818103600083015261126f81611233565b9050919050565b7f4e6f7420656e6f7567682066756e647300000000000000000000000000000000600082015250565b60006112ac601083610d40565b91506112b782611276565b602082019050919050565b600060208201905081810360008301526112db8161129f565b9050919050565b7f416c726561647920736f6c640000000000000000000000000000000000000000600082015250565b6000611318600c83610d40565b9150611323826112e2565b602082019050919050565b600060208201905081810360008301526113478161130b565b9050919050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61138b82610d7b565b810181811067ffffffffffffffff821117156113aa576113a9611353565b5b80604052505050565b60006113bd610c66565b90506113c98282611382565b919050565b600067ffffffffffffffff8211156113e9576113e8611353565b5b602082029050602081019050919050565b600080fd5b60008151905061140e81611026565b92915050565b6000611427611422846113ce565b6113b3565b9050808382526020820190506020840283018581111561144a576114496113fa565b5b835b81811015611473578061145f88826113ff565b84526020840193505060208101905061144c565b5050509392505050565b600082601f8301126114925761149161134e565b5b81516114a2848260208601611414565b91505092915050565b6000602082840312156114c1576114c0610c70565b5b600082015167ffffffffffffffff8111156114df576114de610c75565b5b6114eb8482850161147d565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b61155b81610e07565b82525050565b60006020820190506115766000830184611552565b92915050565b600060a08201905081810360008301526115968188610d8c565b905081810360208301526115aa8187610d8c565b90506115b96040830186610d0b565b81810360608301526115cb8185610d8c565b905081810360808301526115df8184610d8c565b90509695505050505050565b600060ff82169050919050565b60008160f81b9050919050565b6000611610826115f8565b9050919050565b611628611623826115eb565b611605565b82525050565b600081905092915050565b600061164482610fa1565b61164e818561162e565b935061165e818560208601610d51565b80840191505092915050565b60006116768286611617565b6001820191506116868285611617565b6001820191506116968284611639565b9150819050949350505050565b60006060820190506116b86000830186611552565b6116c56020830185611552565b6116d26040830184611552565b949350505050565b60006116e582610de7565b9050919050565b6116f5816116da565b82525050565b61170481610e95565b82525050565b600082825260208201905092915050565b600061172682610fa1565b611730818561170a565b9350611740818560208601610d51565b61174981610d7b565b840191505092915050565b600060608301600083015161176c60008601826116ec565b50602083015161177f60208601826116fb565b5060408301518482036040860152611797828261171b565b9150508091505092915050565b6117ad81610f5e565b82525050565b600060608301600083015184820360008601526117d08282611754565b91505060208301516117e560208601826116fb565b5060408301516117f860408601826117a4565b508091505092915050565b600060408201905061181860008301856110cf565b818103602083015261182a81846117b3565b90509392505050565b600080fd5b600067ffffffffffffffff82111561185357611852611353565b5b61185c82610d7b565b9050602081019050919050565b600061187c61187784611838565b6113b3565b90508281526020810184848401111561189857611897611833565b5b6118a3848285610d51565b509392505050565b600082601f8301126118c0576118bf61134e565b5b81516118d0848260208601611869565b91505092915050565b6000602082840312156118ef576118ee610c70565b5b600082015167ffffffffffffffff81111561190d5761190c610c75565b5b611919848285016118ab565b91505092915050565b60006040820190506119376000830185611552565b6119446020830184611552565b939250505056fea2646970667358221220f11e27f126a55bbb5f0894538c092f8a7b1ca80c17b286daee952024243b6b4164736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c8063ad7fadc511610066578063ad7fadc514610120578063be193d271461013c578063c5a1d7f01461015a578063d3d72d2a14610178578063fd199bfe1461019757610093565b806301ffc9a71461009857806306fdde03146100c8578063227b2e7f146100e657806354fd4d5014610102575b600080fd5b6100b260048036038101906100ad9190610cd2565b6101ca565b6040516100bf9190610d1a565b60405180910390f35b6100d061029c565b6040516100dd9190610dc5565b60405180910390f35b61010060048036038101906100fb9190610ecb565b61032a565b005b61010a610538565b6040516101179190610dc5565b60405180910390f35b61013a60048036038101906101359190610f1e565b6105c6565b005b61014461092b565b6040516101519190610d1a565b60405180910390f35b61016261094f565b60405161016f9190610f77565b60405180910390f35b610180610973565b60405161018e929190610ff6565b60405180910390f35b6101b160048036038101906101ac9190611052565b6109b2565b6040516101c194939291906110de565b60405180910390f35b60007f3fce835e000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061029557507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b600080546102a990611152565b80601f01602080910402602001604051908101604052809291908181526020018280546102d590611152565b80156103225780601f106102f757610100808354040283529160200191610322565b820191906000526020600020905b81548152906001019060200180831161030557829003601f168201915b505050505081565b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610398576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038f906111cf565b60405180910390fd5b600060405180608001604052808473ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff16815260200183815260200160001515815250600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015560608201518160030160006101000a81548160ff0219169083151502179055509050503073ffffffffffffffffffffffffffffffffffffffff167fd8e128775b7d140e398e926eac4a340f22911251358cb8069551f12bc0f5ab618360405161052a91906111ef565b60405180910390a250505050565b6001805461054590611152565b80601f016020809104026020016040519081016040528092919081815260200182805461057190611152565b80156105be5780601f10610593576101008083540402835291602001916105be565b820191906000526020600020905b8154815290600101906020018083116105a157829003601f168201915b505050505081565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900460ff1615151515815250509050600073ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1603610758576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074f90611256565b60405180910390fd5b8060400151816020015173ffffffffffffffffffffffffffffffffffffffff163110156107ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b1906112c2565b60405180910390fd5b600015158160600151151514610805576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fc9061132e565b60405180910390fd5b6001816060019015159081151581525050600033905060008373ffffffffffffffffffffffffffffffffffffffff1663a0e67e2b6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610868573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061089191906114ab565b6000815181106108a4576108a36114f4565b5b602002602001015190506108ba85858385610a98565b6108ca8584602001513084610a98565b3373ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fa368df6d8ea29fc7367045e5c6a2e3a04b89059842ed575d55ce8531117cfeae60405160405180910390a35050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000606060038081111561098a57610989611523565b5b91503060405160200161099d9190611561565b60405160208183030381529060405290509091565b60026020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030160009054906101000a900460ff16905084565b606060008083600001518460200151856040015186606001518760800151604051602001610a6195949392919061157c565b604051602081830303815290604052604051602001610a829392919061166a565b6040516020818303038152906040529050919050565b600060018383604051602401610ab0939291906116a3565b6040516020818303038152906040527fe318b52b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050600060405180606001604052808673ffffffffffffffffffffffffffffffffffffffff168152602001600081526020018381525090506000604051806060016040528083815260200160008152602001600080191681525090508673ffffffffffffffffffffffffffffffffffffffff166330f571f987836040518363ffffffff1660e01b8152600401610bc4929190611803565b6000604051808303816000875af1158015610be3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610c0c91906118d9565b508573ffffffffffffffffffffffffffffffffffffffff167fc0f702ee865bb9620cf6bc5c77eba7c58496654d164d19ebf850253e697177998686604051610c55929190611922565b60405180910390a250505050505050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610caf81610c7a565b8114610cba57600080fd5b50565b600081359050610ccc81610ca6565b92915050565b600060208284031215610ce857610ce7610c70565b5b6000610cf684828501610cbd565b91505092915050565b60008115159050919050565b610d1481610cff565b82525050565b6000602082019050610d2f6000830184610d0b565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610d6f578082015181840152602081019050610d54565b60008484015250505050565b6000601f19601f8301169050919050565b6000610d9782610d35565b610da18185610d40565b9350610db1818560208601610d51565b610dba81610d7b565b840191505092915050565b60006020820190508181036000830152610ddf8184610d8c565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e1282610de7565b9050919050565b6000610e2482610e07565b9050919050565b610e3481610e19565b8114610e3f57600080fd5b50565b600081359050610e5181610e2b565b92915050565b6000610e6282610e07565b9050919050565b610e7281610e57565b8114610e7d57600080fd5b50565b600081359050610e8f81610e69565b92915050565b6000819050919050565b610ea881610e95565b8114610eb357600080fd5b50565b600081359050610ec581610e9f565b92915050565b600080600060608486031215610ee457610ee3610c70565b5b6000610ef286828701610e42565b9350506020610f0386828701610e80565b9250506040610f1486828701610eb6565b9150509250925092565b60008060408385031215610f3557610f34610c70565b5b6000610f4385828601610e42565b9250506020610f5485828601610e80565b9150509250929050565b6000819050919050565b610f7181610f5e565b82525050565b6000602082019050610f8c6000830184610f68565b92915050565b610f9b81610e95565b82525050565b600081519050919050565b600082825260208201905092915050565b6000610fc882610fa1565b610fd28185610fac565b9350610fe2818560208601610d51565b610feb81610d7b565b840191505092915050565b600060408201905061100b6000830185610f92565b818103602083015261101d8184610fbd565b90509392505050565b61102f81610e07565b811461103a57600080fd5b50565b60008135905061104c81611026565b92915050565b60006020828403121561106857611067610c70565b5b60006110768482850161103d565b91505092915050565b6000819050919050565b60006110a461109f61109a84610de7565b61107f565b610de7565b9050919050565b60006110b682611089565b9050919050565b60006110c8826110ab565b9050919050565b6110d8816110bd565b82525050565b60006080820190506110f360008301876110cf565b61110060208301866110cf565b61110d6040830185610f92565b61111a6060830184610d0b565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061116a57607f821691505b60208210810361117d5761117c611123565b5b50919050565b7f556e617574686f72697a65640000000000000000000000000000000000000000600082015250565b60006111b9600c83610d40565b91506111c482611183565b602082019050919050565b600060208201905081810360008301526111e8816111ac565b9050919050565b60006020820190506112046000830184610f92565b92915050565b7f4e6f7420666f722073616c650000000000000000000000000000000000000000600082015250565b6000611240600c83610d40565b915061124b8261120a565b602082019050919050565b6000602082019050818103600083015261126f81611233565b9050919050565b7f4e6f7420656e6f7567682066756e647300000000000000000000000000000000600082015250565b60006112ac601083610d40565b91506112b782611276565b602082019050919050565b600060208201905081810360008301526112db8161129f565b9050919050565b7f416c726561647920736f6c640000000000000000000000000000000000000000600082015250565b6000611318600c83610d40565b9150611323826112e2565b602082019050919050565b600060208201905081810360008301526113478161130b565b9050919050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61138b82610d7b565b810181811067ffffffffffffffff821117156113aa576113a9611353565b5b80604052505050565b60006113bd610c66565b90506113c98282611382565b919050565b600067ffffffffffffffff8211156113e9576113e8611353565b5b602082029050602081019050919050565b600080fd5b60008151905061140e81611026565b92915050565b6000611427611422846113ce565b6113b3565b9050808382526020820190506020840283018581111561144a576114496113fa565b5b835b81811015611473578061145f88826113ff565b84526020840193505060208101905061144c565b5050509392505050565b600082601f8301126114925761149161134e565b5b81516114a2848260208601611414565b91505092915050565b6000602082840312156114c1576114c0610c70565b5b600082015167ffffffffffffffff8111156114df576114de610c75565b5b6114eb8482850161147d565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b61155b81610e07565b82525050565b60006020820190506115766000830184611552565b92915050565b600060a08201905081810360008301526115968188610d8c565b905081810360208301526115aa8187610d8c565b90506115b96040830186610d0b565b81810360608301526115cb8185610d8c565b905081810360808301526115df8184610d8c565b90509695505050505050565b600060ff82169050919050565b60008160f81b9050919050565b6000611610826115f8565b9050919050565b611628611623826115eb565b611605565b82525050565b600081905092915050565b600061164482610fa1565b61164e818561162e565b935061165e818560208601610d51565b80840191505092915050565b60006116768286611617565b6001820191506116868285611617565b6001820191506116968284611639565b9150819050949350505050565b60006060820190506116b86000830186611552565b6116c56020830185611552565b6116d26040830184611552565b949350505050565b60006116e582610de7565b9050919050565b6116f5816116da565b82525050565b61170481610e95565b82525050565b600082825260208201905092915050565b600061172682610fa1565b611730818561170a565b9350611740818560208601610d51565b61174981610d7b565b840191505092915050565b600060608301600083015161176c60008601826116ec565b50602083015161177f60208601826116fb565b5060408301518482036040860152611797828261171b565b9150508091505092915050565b6117ad81610f5e565b82525050565b600060608301600083015184820360008601526117d08282611754565b91505060208301516117e560208601826116fb565b5060408301516117f860408601826117a4565b508091505092915050565b600060408201905061181860008301856110cf565b818103602083015261182a81846117b3565b90509392505050565b600080fd5b600067ffffffffffffffff82111561185357611852611353565b5b61185c82610d7b565b9050602081019050919050565b600061187c61187784611838565b6113b3565b90508281526020810184848401111561189857611897611833565b5b6118a3848285610d51565b509392505050565b600082601f8301126118c0576118bf61134e565b5b81516118d0848260208601611869565b91505092915050565b6000602082840312156118ef576118ee610c70565b5b600082015167ffffffffffffffff81111561190d5761190c610c75565b5b611919848285016118ab565b91505092915050565b60006040820190506119376000830185611552565b6119446020830184611552565b939250505056fea2646970667358221220f11e27f126a55bbb5f0894538c092f8a7b1ca80c17b286daee952024243b6b4164736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "buy(address,address)": {
        "params": {
          "_manager": "Address of the Safe{Core} Protocol Manager.",
          "_safe": "Safe account for sale"
        }
      },
      "listForSale(address,address,uint256)": {
        "params": {
          "_manager": "Address of the Safe{Core} Protocol Manager.",
          "_price": "Price in wei",
          "_safe": "Safe account for sale"
        }
      },
      "metadataProvider()": {
        "returns": {
          "location": "bytes",
          "providerType": "uint256 Type of metadata provider"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      }
    },
    "title": "NataPlugin executes root transactions through 2 Safes to atomically swap ... the ownership of this safe for another newly-created Safe containing the requested amount of ETH.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "buy(address,address)": {
        "notice": "Buy a Safe."
      },
      "listForSale(address,address,uint256)": {
        "notice": "List a Safe for sale."
      },
      "metadataProvider()": {
        "notice": "A function that returns information about the type of metadata provider and its location.         For more information on metadata provider, refer to https://github.com/safe-global/safe-core-protocol-specs/."
      },
      "name()": {
        "notice": "A funtion that returns name of the plugin"
      },
      "requiresRootAccess()": {
        "notice": "A function that indicates if the plugin requires root access to a Safe."
      },
      "version()": {
        "notice": "A function that returns version of the plugin"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 377,
        "contract": "src/NataPlugin.sol:NataPlugin",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 379,
        "contract": "src/NataPlugin.sol:NataPlugin",
        "label": "version",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 589,
        "contract": "src/NataPlugin.sol:NataPlugin",
        "label": "sellerSafeToListings",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(Listing)600_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ISafe)69": {
        "encoding": "inplace",
        "label": "contract ISafe",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Listing)600_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct NataPlugin.Listing)",
        "numberOfBytes": "32",
        "value": "t_struct(Listing)600_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Listing)600_storage": {
        "encoding": "inplace",
        "label": "struct NataPlugin.Listing",
        "members": [
          {
            "astId": 592,
            "contract": "src/NataPlugin.sol:NataPlugin",
            "label": "sellerSafe",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(ISafe)69"
          },
          {
            "astId": 595,
            "contract": "src/NataPlugin.sol:NataPlugin",
            "label": "proceedsSafe",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(ISafe)69"
          },
          {
            "astId": 597,
            "contract": "src/NataPlugin.sol:NataPlugin",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 599,
            "contract": "src/NataPlugin.sol:NataPlugin",
            "label": "sold",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}